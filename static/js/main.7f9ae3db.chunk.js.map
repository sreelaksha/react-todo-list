{"version":3,"sources":["ui/CustomStyles.js","components/TodoEntries.js","components/Header.js","pages/Dashboard.js","pages/Users.js","theme.js","styles.js","App.js","reportWebVitals.js","index.js"],"names":["DivContainer","styled","Div","TodoInput","Input","TodoCard","props","bg","p","flexDir","UserCard","DivHeader","UserSelectedText","Text","theme","colors","successLight","TodoEntries","state","showTaskCompletedNotification","showTaskAddedNotification","input","handleChange","e","setState","target","value","handleNewEntry","selectedUserId","title","newEntry","Math","floor","random","todoList","push","newTodoList","setTodoList","id","this","taskCompleted","map","entry","completed","loading","filter","task","userId","m","x","xs","md","lg","textSize","tag","placeholder","onChange","suffix","name","size","cursor","onClick","pos","top","right","transform","sort","a","b","data","index","shadow","hoverShadow","transition","d","justify","align","toggleTaskCompleted","checked","inactiveColor","activeColor","w","sm","style","textAlign","textDecoration","color","isOpen","onClose","prefix","r","Component","Header","userList","className","h","DropdownButton","Dropdown","Item","setSelectedUserId","Dashboard","useState","setUserList","setLoading","axios","get","then","response","todos","uniqueUsers","todo","indexOf","useEffect","fetchApiData","Users","getRandomColor","length","backgroundColor","DefaultTheme","primaryDark","successDark","F16","F24","fontFamily","primary","createGlobalStyle","debug","DebugEngine","engine","Styletron","App","debugAfterHydration","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f9ae3db.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport {Div,Input, Text} from 'atomize';\n\nexport const DivContainer = styled(Div)`\n    text-align:center;\n`\n\nexport const TodoInput = styled(Input)`\n`\n\nexport const TodoCard = styled(Div)`\n    background-color:${props => props.bg ? props.bg : 'white'};\n    padding:${props => props.p ? props.p : '1rem'};\n    display:flex;\n    flex-direction:${props => props.flexDir ? props.flexDir : 'column'};\n    border: 0.5px;\n    border-radius:0.6rem;\n    margin-top:0.5rem;\n`\nexport const UserCard = styled(Div)`\n    background-color:${props => props.bg ? props.bg : 'white'};\n    padding:${props => props.p ? props.p : '1rem'};\n    display:flex;\n    flex-direction:${props => props.flexDir ? props.flexDir : 'column'};\n    border: 0.5px;\n    border-radius:2.5rem;\n    margin-top:0.5rem;\n`\nexport const DivHeader = styled(Div)`\n    span{\n        text-align:right;\n    }\n`\nexport const UserSelectedText = styled(Text)`\n    color: ${props => props.theme.colors.successLight};\n`","import React, {Component} from 'react';\nimport {Div,Col,Row,Text,Checkbox, Label,Notification,Icon,Tag} from 'atomize';\nimport {DivContainer,TodoCard,TodoInput, UserSelectedText} from '../ui/CustomStyles.js';\n\nclass TodoEntries extends Component {\n\n    state = {\n        showTaskCompletedNotification: false,\n        showTaskAddedNotification: false,\n        input:'',\n    }\n\n    toggleTaskCompleted(id) {\n       const todoList = this.props.todoList;\n       let taskCompleted = false;\n       const newTodoList = todoList.map(entry => {\n         if (entry.id === id) {\n           if(!entry.completed){\n               taskCompleted = true;\n           }\n           return { ...entry, completed: !entry.completed}\n         }\n         return entry;\n       });\n       if(taskCompleted){\n          this.setState({ showTaskCompletedNotification: true});\n       }\n       this.props.setTodoList(newTodoList);\n    }\n\n    handleChange = (e) => {\n        this.setState({input: e.target.value});\n     }\n\n    handleNewEntry = (selectedUserId) => {\n        const title = this.state.input;\n        let newEntry = {\n                        \"userId\": selectedUserId,\n                        \"id\": Math.floor(Math.random()*selectedUserId),\n                        \"title\": title,\n                        \"completed\": false,\n                      };\n        const todoList = this.props.todoList;\n        todoList.push(newEntry);\n        const newTodoList = todoList;\n        this.props.setTodoList(newTodoList);\n        this.setState({ input: ''});\n        this.setState({ showTaskAddedNotification: true});\n    }\n\n    render(){\n        const loading = this.props.loading;\n        let todoList = this.props.todoList;\n        const selectedUserId = this.props.selectedUserId;\n        if(selectedUserId !== \"\"){\n            todoList = todoList.filter(task => task.userId === selectedUserId);\n        }\n\n        return(\n            <>\n                <DivContainer m={{ x: { xs: '', md: '1rem', lg:'15rem' }}}>\n                    {loading && <Div>Loading Data...</Div>}\n                    {!loading &&\n                        <>\n                            <Col>\n                                 { selectedUserId !== \"\" &&\n                                <Div p={{ xs: '0.5rem', md: '1rem' }}>\n                                    <UserSelectedText textSize=\"F16\" tag='h2'  p={{ xs: '0.5rem', md: '1rem' }}> User selected: {selectedUserId}</UserSelectedText>\n                                    <TodoInput\n                                      placeholder=\"Add task\"\n                                      onChange = {this.handleChange}\n                                      value={this.state.input}\n                                      suffix={\n                                        <Icon\n                                          name=\"Add\"\n                                          size=\"20px\"\n                                          cursor=\"pointer\"\n                                          onClick={() => this.handleNewEntry(selectedUserId)}\n                                          pos=\"absolute\"\n                                          top=\"50%\"\n                                          right=\"1rem\"\n                                          transform=\"translateY(-50%)\"\n                                        />\n                                      }\n                                    />\n                                </Div>\n                                }\n                                { todoList &&\n                                todoList.sort((a, b) => a.completed ? 1 : -1)\n                                .map((data,index) => {\n                                    return(\n                                    <TodoCard shadow='2'\n                                      hoverShadow='4'\n                                      transition key={index}>\n                                        <Row d='flex' justify='space-between' align='center'>\n                                                <Label>\n                                                        <Checkbox\n                                                            onChange={() => this.toggleTaskCompleted(data.id)}\n                                                            checked={data.completed}\n                                                            inactiveColor=\"success400\"\n                                                            activeColor=\"success700\"\n                                                            size=\"24px\"\n                                                            />\n                                                        <Text w={{xs:\"18rem\", sm: '25rem', md: '30rem'}} style={{textAlign:\"left\", textDecoration: data.completed ? \"line-through\":\"\"}}> {data.title}</Text>\n                                                </Label>\n                                                <Tag><Icon name=\"UserCircle\" color=\"black\" size=\"18px\"/> {data.userId}</Tag>\n                                        </Row>\n                                    </TodoCard>\n                                    )\n                                })}\n                            </Col>\n                        </>\n                    }\n                </DivContainer>\n\n                <Notification\n                     bg=\"success700\"\n                     isOpen={this.state.showTaskCompletedNotification}\n                     onClose={() => this.setState({ showTaskCompletedNotification: false })}\n                     prefix={\n                       <Icon\n                         name=\"Success\"\n                         color=\"white\"\n                         size=\"16px\"\n                         m={{ r: \"0.5rem\" }}\n                       />\n                     }\n                   >\n                    Task Completed!\n                </Notification>\n\n                <Notification\n                     bg=\"info700\"\n                     isOpen={this.state.showTaskAddedNotification}\n                     onClose={() => this.setState({ showTaskAddedNotification: false })}\n                     prefix={\n                       <Icon\n                         name=\"InfoSolid\"\n                         color=\"white\"\n                         size=\"18px\"\n                         m={{ r: \"0.5rem\" }}\n                       />\n                     }\n                   >\n                    Task Added and Assigned to User {selectedUserId}!\n                </Notification>\n            </>\n         )\n    }\n}\n\nexport default TodoEntries;","import {Text} from 'atomize';\nimport {DivHeader} from '../ui/CustomStyles.js';\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Header(props){\n    const userList = props.userList;\n    return(\n        <DivHeader className='container' d='flex' justify='space-between' align='center' h='5rem'>\n            <Text textSize=\"F24\" tag=\"h1\">TODO APP</Text>\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Select User\">\n                  <Dropdown.Item onClick={() => props.setSelectedUserId(\"\")} >NONE</Dropdown.Item>\n                     { userList &&\n                            userList.map((data,index) => {\n                                 return( <Dropdown.Item onClick={() => props.setSelectedUserId(data)}  key={index}>{data}</Dropdown.Item>);\n                             })\n                     }\n                     { !userList &&\n                           <Dropdown.Item>Loading...</Dropdown.Item>\n                     }\n            </DropdownButton>\n        </DivHeader>\n    );\n}\n\nexport default Header;","import React,{ useEffect,  useState }  from 'react';\nimport axios from 'axios';\nimport TodoEntries from '../components/TodoEntries.js';\nimport {Div} from 'atomize';\nimport Header from '../components/Header.js';\n\n function Dashboard(){\n   const [todoList, setTodoList] = useState([]);\n   const [userList, setUserList] = useState([]);\n   const [loading, setLoading] = useState(true);\n   const [selectedUserId, setSelectedUserId] = useState(\"\");\n\n   async function fetchApiData() {\n       const todos = await axios.get('https://jsonplaceholder.typicode.com/todos')\n           .then(response => {\n               return response.data;\n       });\n       setTodoList(todos);\n       const uniqueUsers = [];\n       todos.map(todo => {\n           if (uniqueUsers.indexOf(todo.userId) === -1) {\n               uniqueUsers.push(todo.userId)\n           }\n       });\n       setUserList(uniqueUsers);\n       setLoading(false);\n   }\n\n    useEffect(() => {\n        fetchApiData();\n    }, []);\n\n\n    return(\n        <>\n            <Header userList={userList} setSelectedUserId={setSelectedUserId}/>\n            <Div className=\"container\">\n                <TodoEntries todoList = {todoList} selectedUserId={selectedUserId} loading={loading} setTodoList={setTodoList}/>\n            </Div>\n        </>\n    );\n\n}\n\nexport default Dashboard;","import React, {useEffect,  useState} from 'react';\nimport {Div,Row,Text} from 'atomize';\nimport {DivContainer,UserCard} from '../ui/CustomStyles.js';\nimport Header from '../components/Header.js';\nimport axios from 'axios';\n\nfunction Users(){\n    const [todoList, setTodoList] = useState([]);\n    const [userList, setUserList] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    async function fetchApiData() {\n        const todos = await axios.get('https://jsonplaceholder.typicode.com/todos')\n            .then(response => {\n                return response.data;\n        });\n        setTodoList(todos);\n        const uniqueUsers = [];\n        todos.map(todo => {\n            if (uniqueUsers.indexOf(todo.userId) === -1) {\n                uniqueUsers.push(todo.userId)\n            }\n        });\n        setUserList(uniqueUsers);\n        setLoading(false);\n    }\n\n    function getRandomColor(){\n        var colors = [\"#F5DEB3\",\"#FA8072\",\"#20B2AA\",\"#E6E6FA\",\"#87CEEB\",\"#D3D3D3\",\"#FFE4E1\"];\n        var randomColor = colors[Math.floor(Math.random()*colors.length)];\n        return randomColor;\n    }\n\n    useEffect(() => {\n        fetchApiData();\n    }, []);\n\n    return(\n        <>\n            <Header/>\n            <DivContainer className=\"container\">\n                    {loading && <Div>Loading Users...</Div>}\n                    {!loading &&\n                        <>\n                        <Text textSize=\"F24\"  tag=\"h1\"  p={{ xs: '2rem', md: '2rem' }}> Users List</Text>\n                        <Row justify=\"space-around\" >\n                            {userList &&\n                            userList.map((data,index) => {\n                                return(\n                                    <UserCard shadow='2'\n                                      hoverShadow='4'\n                                      transition key={index}\n                                      style={{backgroundColor:getRandomColor()}}\n                                      p={{ xs: '2rem', md: '4rem' }}\n                                      m={{xs: '0.5rem', md: '1rem'}}>\n                                            <Text> User : {data}</Text>\n                                    </UserCard>\n                                )\n                            })\n                            }\n                        </Row>\n                        </>\n                    }\n            </DivContainer>\n        </>\n    );\n}\n\nexport default Users;","import { DefaultTheme } from \"atomize\";\n\nconst theme = {\n    ...DefaultTheme,\n    colors:{\n        primaryDark:'#3e3d3cs',\n        successDark:'success700',\n        successLight:'#6b5b95',\n    },\n    textSize:{\n        size: {\n            F16:'16px',\n            F24:'24px',\n        }\n    },\n    fontFamily: {\n        primary: `'Montserrat', sans-serif;`\n    }\n}\n\nexport default theme;","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n    html {\n        font-size: props.theme.textSize.size.F16;\n        box-sizing:border-box;\n    }\n    *, *::before, *::after {\n        padding:0;\n        margin:0;\n        box-sizing:inherit;\n        font-family: props.theme.fontFamily.primary;\n        color:${props => props.theme.colors.primaryDark};\n    }\n    body {\n        font-size:1rem;\n        line-height:1.5;\n    }\n    .container{\n        max-width:1440px;\n        width:90%;\n        margin:0 auto;\n    }\n`;","import './App.css';\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { ThemeProvider, StyleReset } from \"atomize\";\nimport { ThemeProvider as StyledProvider } from 'styled-components';\nimport Dashboard from './pages/Dashboard.js';\nimport Users from './pages/Users.js';\nimport theme from './theme';\nimport { BrowserRouter,Route, Switch } from 'react-router-dom';\nimport GlobalStyles from './styles.js';\n\nconst debug = new DebugEngine();\nconst engine = new Styletron();\n\nfunction App() {\n  return (\n        <ThemeProvider theme={theme}>\n            <StyledProvider theme={theme}>\n                <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n                    <StyleReset/>\n                    <GlobalStyles/>\n                    <BrowserRouter>\n                        <Switch>\n                            <Route path = \"/\" exact component = {Dashboard} ></Route>\n                            <Route path = \"/users\" component = {Users} ></Route>\n                        </Switch>\n                    </BrowserRouter>\n                </StyletronProvider>\n            </StyledProvider>\n        </ThemeProvider>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}